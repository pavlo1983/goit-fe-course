/*
  –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞.  
  –ü–æ —Å—Å—ã–ª–∫–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–≤ Stopwatch http://www.online-stopwatch.com/full-screen-stopwatch/
  
  –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ HTML –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∞:
  
  <div class="stopwatch">
    <p class="time js-time">00:00.0</p>
    <button class="btn js-start">Start</button>
    <button class="btn js-take-lap">Lap</button>
    <button class="btn js-reset">Reset</button>
  </div>
  <ul class="laps js-laps"></ul>
  
  –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
  
  - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É button.js-start, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –≤—Ä–µ–º—è 
    —Å–æ —Å—Ç–∞—Ä—Ç–∞ –∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, –æ–±–Ω–æ–≤–ª—è—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ p.js-time 
    –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xx:xx.x (–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã.—Å–æ—Ç–Ω–∏_–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥).
       
    üîî –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ç–∞–∫ –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ç–Ω–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, –∏–Ω—Ç–µ—Ä–≤–∞–ª
                  –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º 1 —Ä–∞–∑ –≤ 100 –º—Å.
    
  - –ö–æ–≥–¥–∞ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –∑–∞–ø—É—â–µ–Ω, —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ button.js-start –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Pause', 
    –∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Å—Ç–∞–≤–Ω–æ–≤–∫—É —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –±–µ–∑ —Å–±—Ä–æ—Å–∞ 
    –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏.
    
    üîî –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.
  
  - –ï—Å–ª–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—É–∑—ã, —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ button.js-start
    –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Continue'. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–ª–∏–∫–µ –≤ –Ω–µ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, 
    –∞ —Ç–µ–∫—Å—Ç –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'Pause'. –¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è 'Pause' –ø—Ä–æ—à–ª–æ 6 —Å–µ–∫—É–Ω–¥ 
    —Å–æ —Å—Ç–∞—Ä—Ç–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'Continue' 10 —Å–µ–∫—É–Ω–¥ —Å–ø—É—Å—Ç—è, —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ 
    —Å 6 —Å–µ–∫—É–Ω–¥, –∞ –Ω–µ —Å 16. 
    
    üîî –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Ä–µ–º—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–∞—É–∑—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ 
                  –ø—Ä–∏ —Ä–∞—Å—Å—á–µ—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–Ω–∏–º–∞—è
                  —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞.
    
  - –ï—Å–ª–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—É–∑—ã, –∫–Ω–æ–ø–∫–∞ 
    button.js-reset –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ (–Ω–∞ –Ω–µ–µ –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å), –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    disabled. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∏ —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    
  - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ button.js-take-lap –ø—Ä–∏ –∫–ª–∏–∫–µ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ 
    –≤ –º–∞—Å—Å–∏–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ul.js-laps –Ω–æ–≤–æ–≥–æ li —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ xx:xx.x
*/



/*
const clockface = document.querySelector(".js-time");
const startBtn = document.querySelector(".js-start");
const lapBtn = document.querySelector(".js-take-lap");
const resetBtn = document.querySelector(".js-reset");
const list = document.querySelector(".js-laps");

let isActive;

if (!isActive) {
  resetBtn.hidden = true;
}

class Stopwatch {
  constructor({ onTick }) {
    this.isActive = false;
    this.startTime = null;
    this.deltaTime = null;
    this.timerId = null;
    this.onTick = onTick;
    this.onPause = 0;
  }
  start() {
    if (!this.isActive) {
      this.isActive = true;
      this.startTime = Date.now();

      this.timerId = setInterval(() => {
        const currentTime = Date.now();
        this.deltaTime = currentTime - this.startTime;
        const time = new Date(this.deltaTime);

        let minutes = time.getMinutes();
        let seconds = time.getSeconds();

        const min = minutes >= 10 ? minutes : "0" + minutes;
        const sec = seconds >= 10 ? seconds : "0" + seconds;
        const msec = Number.parseInt(time.getMilliseconds() / 100);

        this.onTick({ min, sec, msec });
      }, 100);
      resetBtn.hidden = false;
    }
  }

  pause() {
    clearInterval(this.timerId);
    
  }

  continue() {
    this.timerId = setInterval(() => {}, 100);
  }

  startButtonOnClick() {
    if (startBtn.textContent === "Start") {
      this.start();
      startBtn.textContent = "Pause";
      resetBtn.hidden = false;
    } else if (startBtn.textContent === "Pause") {
      this.pause();
      startBtn.textContent = "Continue";
    } else if (startBtn.textContent === "Continue") {
      startBtn.textContent = "Pause";
      this.continue();
    }
  }

  lapButtonOnClick() {
    if (startBtn.textContent === "Start") {
      return;
    } else if (startBtn.textContent === "Pause") {
      const timeLap = Date.now() - this.startTime;
      list.insertAdjacentHTML("afterbegin", `<li> ${timeLap} </li>`);
    } else if (startBtn.textContent === "Continue") {
      const timeLap = this.onPause - this.startTime;
      list.insertAdjacentHTML("afterbegin", `<li> ${timeLap} </li>`);
    }
  }

  stopButtonOnClick() {
    this.isActive = false;
    clearInterval(this.timerId);
    this.timerId = null;
    this.startTime = null;
    this.deltaTime = 0;
    this.onTick({ min: "00", sec: "00", msec: "0" });
    resetBtn.hidden = true;
    startBtn.textContent = "Start";
    list.innerHTML = "";
  }
}

const stopwatch = new Stopwatch({
  onTick: updateClockface
});

startBtn.addEventListener(
  "click",
  stopwatch.startButtonOnClick.bind(stopwatch)
);
lapBtn.addEventListener("click", stopwatch.lapButtonOnClick.bind(stopwatch));
resetBtn.addEventListener("click", stopwatch.stopButtonOnClick.bind(stopwatch));

function updateClockface({ min, sec, msec }) {
  clockface.textContent = `${min}:${sec}.${msec}`;
}
*/
"use strict";



class StopWatch {
  constructor(parent = document) {
    this.parent = parent;
    this.startBtn = document.querySelector(".js-start");
    this.lapBtn = document.querySelector(".js-take-lap");
    this.resetBtn = document.querySelector(".js-reset");
    this.list = document.querySelector(".js-laps");
    this.clockface = document.querySelector(".js-time");
    this.setIntervalId = null;
    this.from = null;
    this.to = null;
  }

  startBtnOnCLick() {
    if (this.startBtn.textContent.toLowerCase() === "start") {
      this.start();
      this.startBtn.textContent = "Pause";
    } else if (this.startBtn.textContent.toLowerCase() === "pause") {
      this.startBtn.textContent = "Continue";
      this.pause();
    } else if (this.startBtn.textContent.toLowerCase() === "continue") {
      this.startBtn.textContent = "Pause";
      this.continue();
    }
  }
  pause() {
    this.to = Date.now();
    clearInterval(this.setIntervalId);
    this.clockface.textContent = this.toTimeString(this.to - this.from);
  }

  continue() {
    this.from = Date.now() - (this.to - this.from);
    this.step();
  }

  start() {
    this.from = new Date();
    this.step();
  }

  step() {
    this.setIntervalId = setInterval(() => {
      (this.clockface.textContent = this.toTimeString(Date.now() - this.from)),
        1000 / 60;
    });
  }

  lapBtnOnCLick() {
    if (this.startBtn.textContent.toLowerCase() === "start") {
     return;
    } else if (this.startBtn.textContent.toLowerCase() === "pause") {
      const time = this.toTimeString(Date.now() - this.from);
      this.list.insertAdjacentHTML("afterbegin", `<li> ${time} </li>`)
    } else if (this.startBtn.textContent.toLowerCase() === "continue") {
      const time = this.toTimeString(this.to - this.from);
      this.list.insertAdjacentHTML("afterbegin", `<li> ${time} </li>`)
    }
  }

  resetBtnOnCLick() {
    clearInterval(this.setIntervalId);
    this.clockface.textContent = this.toTimeString(0);
    this.startBtn.textContent = "Start";
    this.list.innerHTML = '';
  }

  toTimeString(timeStamp) {
    const date = new Date(timeStamp);
    const time = date.toUTCString().slice(17, -4);
    let minutes = date.getMinutes();
    let seconds = date.getSeconds();
    const min = minutes >= 10 ? minutes : "0" + minutes;
    const sec = seconds >= 10 ? seconds : "0" + seconds;
    const msec = Number.parseInt(date.getMilliseconds() / 100);

    return `${min}:${sec}.${msec}`;
  }

  run() {
    this.startBtn.addEventListener("click", this.startBtnOnCLick.bind(this));
    this.lapBtn.addEventListener('click', this.lapBtnOnCLick.bind(this));
    this.resetBtn.addEventListener("click", this.resetBtnOnCLick.bind(this));
  }
}

const stopWatch = new StopWatch(document.querySelector(".stopwatch"));
stopWatch.run();



